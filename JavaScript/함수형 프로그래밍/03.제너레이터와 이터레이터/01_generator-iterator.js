/**
  # 제너레이터/이터레이터
  - 제너레이터 : 이터레이터이자 이터러블을 생성하는 함수. 즉, 이터레이터를 리턴하는 함수
*/

function *gen() { // 일반함수 앞에 *을 붙여 제너레이터를 만든다.
  yield 1  // 제너레이터에서 이 yield를 통해서 몇번의 next를 통해 값을 꺼내줄지 정할 수 있다.
  yield 2
  yield 3
  if (false) yield 4 // 제너레이터는 순회할 값을 문장으로 표현하는 것이라고 할 수 있기에 이런 표현도 가능하다.
  return 100 // 제너레이터에서는 마지막에 이런 리턴값을 만들 수도 있는데 이는 done이 true가 됐을 때 전달된다. 이 값은 순회시에는 포함되지 않는다.(for...of 할 때)
}

let iter = gen() // 제너레이터를 실행한 결과인 iter는 이터레이터이다.
console.log(iter.next())
console.log(iter.next())
console.log(iter.next())
console.log(iter.next()) // 이렇게 제너레이터를 통해 쉽게 이터레이터를 만들 수 있다.

// iter는 이터레이터이자 이터러블이기도 하다
console.log(iter[Symbol.iterator]() === iter) // 지난 강의에서 설명했듯이 이터레이터는 심볼이터레이터를 가지고있고 그 실행결과는 자기 자신이다. => 제너레이터는 잘 정의된 이터레이터를 리턴하는 함수이다. 

// 제너레이터의 실핼결과가 이터레이터이자 이터러블이기 때문에
for (const a of gen()) console.log(a) // 이런 순회 또한 가능하다.

/* 
 제너레이터라는 문장을 통해 순회할 수 있는 값을 만들 수 있다는 것은 어떠한 값도 순회할 수 있는 형태로 조작할 수 있으며,
 제너레이터를 통해 다양한 값들을 순회할 수 있는 이터러블을 쉽게 만들 수 있다.
*/